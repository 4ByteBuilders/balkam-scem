# A special scalar type that allows for file uploads.
scalar Upload

# Represents a user of the application.
type User {
  id: ID!
  username: String!
  email: String!
}

# The payload returned after a successful authentication.
type AuthPayload {
  token: String!
  user: User!
}

# Contains information about storage savings due to deduplication.
type StorageStats {
  originalSizeBytes: Int!
  deduplicatedSizeBytes: Int! # The actual space this file takes on disk
  savedBytes: Int!
  savedPercentage: Float!
}

# Defines the roles a user can have on a resource.
enum Role {
  VIEWER
  EDITOR
}

# Shows a user's specific permission level on a resource.
type Permission {
  user: User!
  role: Role!
}

type Tag {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
}

# A generic interface for any item in the vault, whether a file or folder.
# This is the core of the new, unified schema.
interface Resource {
  id: ID!
  name: String!
  owner: User!
  parent: Folder # Parent is always a folder or null if root
  createdAt: String!
  updatedAt: String!
  shareToken: String!
  # List of users who have explicit access to this resource.
  permissions: [Permission!]
  tags: [Tag!]!
}

# Represents a folder, which can contain other resources.
type Folder implements Resource {
  # Fields from the Resource interface
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  createdAt: String!
  updatedAt: String!
  permissions: [Permission!]
  type: String!
  shareToken: String!

  # Folder-specific field
  # Contains all the files and sub-folders within this folder.
  children: [Resource!]!
  tags: [Tag!]!
}

# Represents a file's metadata.
type File implements Resource {
  # Fields from the Resource interface
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  createdAt: String!
  updatedAt: String!
  permissions: [Permission!]
  type: String!
  shareToken: String!

  # File-specific fields
  sizeBytes: Int!
  mimeType: String!
  storage: StorageStats!
  tags: [Tag!]!
}

input SearchFilters {
  name: String
  # e.g., ["file"] to only search for files
  types: [String!]
  # e.g., ["image/jpeg", "application/pdf"]
  mimeTypes: [String!]
  minSizeBytes: Int
  maxSizeBytes: Int
  # Search for files created after this date (e.g., "2025-01-01T00:00:00Z")
  afterDate: String
  # Search for files created before this date
  beforeDate: String
  # e.g., ["Q4-Report", "urgent"]
  tags: [String!]
  # uploader's name
  uploaderName: String
}

# The entry point for all read operations.
type Query {
  # Get the currently authenticated user's profile.
  me: User

  # --- NEW: Specific queries for files and folders ---
  # Get a single file by its ID.
  file(id: ID!): File
  # Get a single folder by its ID.
  folder(id: ID!): Folder
  # NEW: Resolves a share token to a resource, performing an auth check.
  resolveShareLink(token: String!): Resource
  # Get the contents of a specific folder.
  # If folderId is null, it returns the user's root-level resources.
  resources(folderId: ID): [Resource!]!
  # Search for resources based on a variety of criteria
  # limit and offset are for pagination
  # e.g - first page shows first 25 items, 2nd page shows next 25, and so on..
  searchResources(
    filters: SearchFilters!
    offset: Int = 0
    limit: Int = 25
  ): [Resource!]!
}

# The entry point for all write/change operations.
type Mutation {
  # --- User management ---
  register(username: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # --- File and Folder creation ---
  uploadFile(file: Upload!, parentId: ID): File!
  createFolder(name: String!, parentId: ID): Folder!

  # --- NEW: Specific mutations for files ---
  renameFile(id: ID!, newName: String!): File!
  deleteFile(id: ID!): Boolean!
  moveFile(fileId: ID!, newParentId: ID): File!

  # --- NEW: Specific mutations for folders ---
  renameFolder(id: ID!, newName: String!): Folder!
  deleteFolder(id: ID!): Boolean!
  moveFolder(folderId: ID!, newParentId: ID): Folder!

  # --- Sharing and permissions (still generic) ---
  grantPermission(resourceId: ID!, email: String!, role: Role!): Resource!
  revokePermission(resourceId: ID!, email: String!): Resource!

  # --- Tagging Files and Folders for efficient search
  addTagToResource(resourceID: ID!, tagName: String!): Resource!
  removeTagFromResource(resourceID: ID!, tagID: ID!): Resource!
}