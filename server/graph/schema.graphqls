# A special scalar type that allows for file uploads.
scalar Upload

# Represents a user of the application.
type User {
  id: ID!
  username: String!
  email: String!
}

# The payload returned after a successful authentication.
type AuthPayload {
  token: String!
  user: User!
}

# Contains information about storage savings due to deduplication.
type StorageStats {
  originalSizeBytes: Int!
  deduplicatedSizeBytes: Int! # The actual space this file takes on disk
  savedBytes: Int!
  savedPercentage: Float!
}

# Defines the roles a user can have on a resource.
enum Role {
  VIEWER
  EDITOR
}

# Shows a user's specific permission level on a resource.
type Permission {
  user: User!
  role: Role!
}

# A generic interface for any item in the vault, whether a file or folder.
# This is the core of the new, unified schema.
interface Resource {
  id: ID!
  name: String!
  owner: User!
  parent: Folder # Parent is always a folder or null if root
  createdAt: String!
  updatedAt: String!
  # List of users who have explicit access to this resource.
  permissions: [Permission!]
}

# Represents a folder, which can contain other resources.
type Folder implements Resource {
  # Fields from the Resource interface
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  createdAt: String!
  updatedAt: String!
  permissions: [Permission!]

  # Folder-specific field
  # Contains all the files and sub-folders within this folder.
  children: [Resource!]!
}

# Represents a file's metadata.
type File implements Resource {
  # Fields from the Resource interface
  id: ID!
  name: String!
  owner: User!
  parent: Folder
  createdAt: String!
  updatedAt: String!
  permissions: [Permission!]

  # File-specific fields
  sizeBytes: Int!
  mimeType: String!
  storage: StorageStats!
}

# The entry point for all read operations.
type Query {
  # Get the currently authenticated user's profile.
  me: User

  # Get a single resource by its ID. Can be a file or a folder.
  resource(id: ID!): Resource

  # Get the contents of a specific folder.
  # If folderId is null, it returns the user's root-level resources.
  resources(folderId: ID): [Resource!]!
}

# The entry point for all write/change operations.
type Mutation {
  # --- User management ---
  register(username: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # --- Resource operations ---
  uploadFile(file: Upload!, parentId: ID): File!
  createFolder(name: String!, parentId: ID): Folder!
  renameResource(id: ID!, newName: String!): Resource!
  deleteResource(id: ID!): Boolean!
  moveResource(resourceId: ID!, newParentId: ID): Resource!

  # --- Sharing and permissions ---
  grantPermission(resourceId: ID!, userId: ID!, role: Role!): Resource!
  revokePermission(resourceId: ID!, userId: ID!): Resource!
}