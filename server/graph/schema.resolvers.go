package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"errors"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/bhavyajaix/BalkanID-filevault/graph/generated"
	"github.com/bhavyajaix/BalkanID-filevault/graph/model"
	"github.com/bhavyajaix/BalkanID-filevault/internal/middleware"
	"github.com/bhavyajaix/BalkanID-filevault/pkg/auth"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, email string, password string) (*model.AuthPayload, error) {
	// Call the service to register the user
	dbUser, err := r.UserService.Register(username, email, password)
	if err != nil {
		return nil, err
	}
	// After successful registration, log them in by generating a token
	token, err := auth.GenerateToken(dbUser.ID)
	if err != nil {
		return nil, fmt.Errorf("could not generate token after registration: %w", err)
	}
	// Convert database user to GraphQL user model
	gqlUser := &model.User{
		ID:       fmt.Sprint(dbUser.ID),
		Username: dbUser.Username,
		Email:    dbUser.Email,
	}
	return &model.AuthPayload{
		Token: token,
		User:  gqlUser,
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	// Call the service to log the user in
	dbUser, token, err := r.UserService.Login(email, password)
	if err != nil {
		return nil, err
	}

	// Convert database user to GraphQL user model
	gqlUser := &model.User{
		ID:       fmt.Sprint(dbUser.ID),
		Username: dbUser.Username,
		Email:    dbUser.Email,
	}

	return &model.AuthPayload{
		Token: token,
		User:  gqlUser,
	}, nil
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file graphql.Upload, folderID *string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFile - deleteFile"))
}

// UpdateFileDetails is the resolver for the updateFileDetails field.
func (r *mutationResolver) UpdateFileDetails(ctx context.Context, id string, newFilename string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UpdateFileDetails - updateFileDetails"))
}

// CreateFolder is the resolver for the createFolder field.
func (r *mutationResolver) CreateFolder(ctx context.Context, input model.NewFolderInput) (*model.Folder, error) {
	panic(fmt.Errorf("not implemented: CreateFolder - createFolder"))
}

// DeleteFolder is the resolver for the deleteFolder field.
func (r *mutationResolver) DeleteFolder(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFolder - deleteFolder"))
}

// ShareFilePublic is the resolver for the shareFilePublic field.
func (r *mutationResolver) ShareFilePublic(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: ShareFilePublic - shareFilePublic"))
}

// RevokeFilePublic is the resolver for the revokeFilePublic field.
func (r *mutationResolver) RevokeFilePublic(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: RevokeFilePublic - revokeFilePublic"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	// 1. Get the user ID from the context.
	userID, ok := ctx.Value(middleware.UserContextKey).(uint)
	if !ok {
		// If the key doesn't exist or is not a uint, the user is not authenticated.
		return nil, errors.New("unauthorized: access denied")
	}

	// 2. Now you have the user ID, you can fetch the user's data.
	dbUser, err := r.UserService.GetUserByID(userID) // You'll need to add GetUserByID to your service/repo
	if err != nil {
		return nil, err
	}

	// 3. Convert and return the user.
	return &model.User{
		ID:       fmt.Sprint(dbUser.ID),
		Username: dbUser.Username,
		Email:    dbUser.Email,
	}, nil
}

// MyFiles is the resolver for the myFiles field.
func (r *queryResolver) MyFiles(ctx context.Context, filter *model.FileFilterInput) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: MyFiles - myFiles"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// MyFolders is the resolver for the myFolders field.
func (r *queryResolver) MyFolders(ctx context.Context) ([]*model.Folder, error) {
	panic(fmt.Errorf("not implemented: MyFolders - myFolders"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) UploadFilderID *string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}
*/
